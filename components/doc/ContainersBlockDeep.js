//"&lt;div&gt;"

const ContainersBlockDeep = () => {
    return $('<div>').addClass('doc_content_wrapper').append(
        title('Функциональные контейнеры: Погружение'),
        text('Теперь когда мы знакомы с принципами создания и управления контейнерами, нужно более подробно поговорить об их возможностях, способах применения и ограничениях.'),
        text('Но перед этим хочется отметить, что Micro Component вполне позволяет организовывать свободную архитектуру построения вашего проекта, в связи с тем что она включает в себя обязанности по легкой поддержке уже построенных ранее проектов.'),
        subTitle('Адаптивная композиция компонентов'),
        text('Как правило, не смотря на приведённые ранее примеры более выгодно смотрится способность организовать на Micro Component Динамическую генерацию контента, давайте сразу рассмотрим пример:'),
codeBlock(`const context = MC.createContext();
// давайте представим, что нам нужно отобразить клиента магазина
const persons = MC.createState([]);

const view = MC.createState(true);

function loadPersons() {
    $.ajax('example_url').done((data) => {
        // data === [{
        //   name: string,
        //   secondName: string,
        //   phone: number,
        //   client: boolean,
        //   balance: number
        // }];
        
        // Тут могут быть необходимые манипуляции с данными, и их проверкой
        person.set(data);
    });
};
$('#wrapper').append(
    $((state)=> {
        const [ persons, view ] = state;

        if(!view || !persons.length) {
            return null;
        }
    
        return $('&lt;div&gt;').append(
            persons.map(item => {
                if(!item.client) {
                    return $('&lt;span&gt;').text(item.name + ' ' + item.secondName + ' ' + 'пока не является клиентом!');
                }
                $('&lt;div&gt;').append(
                    $('&lt;span&gt;').text('Имя ' + item.name),
                    $('&lt;span&gt;').text('Фамилия ' + item.secondName),
                    $('&lt;div&gt;').append(
                        $('&lt;p&gt;').text('Связь: ')
                        $('&lt;ul&gt;').append(
                            item.phones.map(phone => {
                                return $('&lt;li&gt;').append(phone)
                            })
                        )
                    ),
                    $('&lt;span&gt;').text('Текущий баланс: ' + item.balance)
                )
            });          
        );
    }, [persons, view], context),

    $('&lt;button&gt;').text('Обновить').on('click', () => {
        loadPersons();
    }),

    $('&lt;button&gt;').text('Показать/Скрыть').on('click', () => {
        view.set(!view.get());
    })
);`),

        text('Тут специально подобран более комплексный пример, сделано это ради того чтобы вы смогли сами посмотреть как мы можем теперь организовать работу с данными и их отображением.'),
        text('Но более важно просмотреть что контейнер может возвращать разный набор данных в зависимости от самих данных. В этом примере, мы в нашем воображаемом магазине, получаем список наших клиентов, которые нам предоставили инженеры бэкенда. Каждый раз когда мы будем нажимать на кнопку "Обновить", после запроса наш элемент будет содержать в себе те данные которые пришли с сервера и попали в set() независимо от того что было там ранее.'),
        text('Так же, стоит обратить внимание на манипуляции в кнопке "Показать/Скрыть", там мы получаем текущее значение view, с помощью метода get() и сразу заменив его на противоположное - записываем в set().'),
        text('Таким образом, мы создали достаточно нагруженную логику по отображению и обновлению части нашей веб страницы, но сделали это довольно явным и легко доступным в поддержке образом.'),
        
        alertBlock(
            text('Обратите внимание, что мы всегда отдаём один селектор, в который уже допустим мы помещаем его дочерние элементы. Дело в том, что Micro Component нужна опора для создания virtual. Поэтому у нас не получится вернуть элементы допустим в массиве.'),
        ),

        text("Тем, кто поддерживает существующие проекты, надеюсь будет приятно увидеть легкую интеграцию нашего созданного компонента в $('#wrapper'). Да, это было очевидно, ведь функция создания компонента соответствует стандартному формату jQuery, но мы впервые с этим столкнулись в данной документации."),
    
        subTitle('Динамические структуры'),

        text('text'),
    )
}